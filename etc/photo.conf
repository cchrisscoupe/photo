# # Database config
dbDriverName org.postgresql.Driver
dbSource jdbc:postgresql://db/photo
dbPoolName photo_db
dbUser nobody
dbPass nopassword
# # Pool tuning
# # Two hours
dbMaxLifeTime 7200000
dbMinConns 0
dbMaxConns 5

######################################################################
# ImageServer implementations
######################################################################

# # Which image server implementation to use
# # Remote
# imageserverimpl net.spy.photo.rmi.ImageServerImpl
# # When using the remote image server, this configuration option describes
# # how to contact it.
# imageserver //tramp/RemoteImageServer
# # Local
imageserverimpl net.spy.photo.ImageServerImpl

######################################################################
# end ImageServer implementations
######################################################################

######################################################################
# ImageCache implementations
######################################################################

# # ImageCache implementation
imagecacheimpl net.spy.photo.LocalImageCacheImpl
# # Directory containing the cache
cache.dir /var/tmp/photocache

# # Cache via RMI
# imagecacheimpl net.spy.photo.RemoteImageCacheImpl
# # Location of remote object server
# rhash.url   //localhost/RObjectServer

######################################################################
# End ImageCache implementations
######################################################################

######################################################################
# ImageServerScaler implementations
######################################################################

# # ImageServer specific config
# # Use the internal image scaler (default).  If this does not work, try
# # ExternalImageServerScaler

# # 100% java based image scaler
# # scaler_class net.spy.JavaImageServerScaler

# # External image scaler, uses convert.cmd (see beolow) to perform the
# # conversion
scaler_class net.spy.photo.ExternalImageServerScaler

# # Command to scale images.  This command will be called with the
# # following arguments:
# # argv[1] -geometry
# # argv[2] WxH  (where W is the numeric width and H is the numeric height)
# # argv[3] inputfile.jpg
# # argv[4] outputfile.jpg
scaler.convert.cmd /usr/local/bin/convert

######################################################################
# end ImageServerScaler implementations
######################################################################

# # Mail server config
mail_server mail
# # This is the sending address of mail the photoservlet sends (like new
# # passwords)
mail_sender dustin+photoservlet@spy.net

# # What's the timezone?
timezone GMT
# # This is the hash to use for passwords
cryptohash SHA

# # This is the default ``optimal'' of the images as they should be displayed
# # to browsers.  Images larger than the optimal size will be scaled down to
# # fit the browser screen (but full-size images can always be requested).
optimal_image_size 800x600

# # How big do you want your thumbnails?  (Thumbnails will maintain aspect
# # ratio, but fit within the given dimensions)
thumbnail_size 220x146

# # The default user is the user whose permissions are inherited by all other
# # users.  If this user has permissions to view something, all other users
# # will have permissions to view it (though it may not appear so in the
# # ACLs).
default_user guest

# # How many minutes between cleanup runs?  Default is 1440 (one day)
cleaner_sleep 1440

# # queries the cleaner should run, they will run in numerical order...no
# # numbers may be skipped, no result sets may be returned
# # (this particular query probably does not work right now if your schema
# # has referential integrity)
cleaner.query1 = delete from album where cat in \
	(select id from cat where name ='Deleted')
# # cleaner.query2 = vacuum analyze
